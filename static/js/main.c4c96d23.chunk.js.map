{"version":3,"sources":["components/Title/index.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","expand","bg","variant","Brand","style","fontFamily","fontSize","Calculator","state","price","percent","showResult","result","handleInputChange","event","target","name","value","setState","handleReset","preventDefault","percentage","n","toFixed","handleSubmit","isNaN","this","onClick","id","type","pattern","inputMode","placeholder","onChange","required","disabled","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c4c96d23.chunk.js","sourcesContent":["import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar'\n\n\nconst Title = () => {\n    return (\n        <>\n            <Navbar className='row' expand=\"lg\" bg=\"danger\" variant=\"dark\" >\n                <div className='col-md-12 text-center'>\n                    <Navbar.Brand className='' style={{fontFamily: 'Shadows Into Light Two', fontSize: '8vw'}}>Di$count Price</Navbar.Brand>\n                </div>\n            </Navbar>\n        </>\n    )\n}\n\nexport default Title;","import React, { Component } from 'react';\nimport './module.css';\n\nclass Calculator extends Component {\n\n    state = {\n        price: '',\n        percent: '',\n        showResult: false,\n        result: 0\n    };\n\n    handleInputChange = event => {\n        // Pull the name and value properties off of the event.target (the element which triggered the event)\n        const { name, value } = event.target;\n\n        // Set the state for the appropriate input field\n        this.setState({\n            [name]: value\n        });\n    };\n\n    handleReset = event => {\n        event.preventDefault()\n        this.setState({ price: \"\", percent: \"\", showResult: false });\n    }\n\n    percentage = (n, percent) => {\n        return (n * percent / 100).toFixed(2);\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        // console.log(`Bill: ${this.state.bill}\\nParty: ${this.state.party}\\nTip: ${this.state.tip}`);\n        let discountedPrice = (n, percent) => {\n            let percentage = (n * percent / 100).toFixed(2)\n            return n - percentage;\n        }\n\n        this.setState({ result: discountedPrice(this.state.price, this.state.percent) });\n\n\n        if (!isNaN(this.state.result)) {\n            this.setState({ showResult: true })\n        } else {\n            this.setState({ showResult: false })\n        }\n\n    }\n\n    render() {\n        return (\n            <>\n                <div className=' row justify-content-md-center text-center mt-3'>\n                    <form className='col-sm-12'>\n\n                        {/* Hidden */}\n                        {this.state.showResult ?\n                            <div className='row justify-content-md-center text-center mt-3 mx-auto'>\n                                <div className='col-sm-12 text-center mx-auto'>\n                                    {/* Each Person<br></br> Pays:<br></br> <span className='bg-primary text-white rounded-pill pl-2 pr-2'> ${this.state.result.toFixed(2)} </span> */}\n\n                                    <div className='row justify-content-sm-center p-2 m-2 mx-auto'>\n                                        <div className='col-md-3 border border-secondary rounded-lg p-2'>\n\n                                            <div className='d-flex justify-content-between'>\n                                                <div className=''>\n                                                    Original Price:\n                                                    </div>\n                                                <div className=''>\n                                                    <span className='border-bottom border-success text-success'>${this.state.price}</span>\n                                                </div>\n                                            </div>\n\n                                            <div className='d-flex justify-content-between'>\n                                                <div className=''>\n                                                    Percent Off:\n                                                    </div>\n                                                <div className=''>\n                                                    <span className='border-bottom border-primary text-primary'>{this.state.percent}%</span>\n                                                </div>\n                                            </div>\n\n                                            <p className='border-bottom border-dark mt-2'></p>\n\n                                            <div className='d-flex justify-content-between'>\n                                                <div className=''>\n                                                    Your Discounted Price is:\n                                                    </div>\n                                                <div className=''>\n                                                    <span className='bg-primary text-white rounded-pill pl-2 pr-2'> ${this.state.result.toFixed(2)}</span>\n                                                </div>\n                                            </div>\n\n                                        </div>\n                                    </div>\n                                    <button className='btn btn-dark mt-3' onClick={this.handleReset}>Reset</button>\n                                </div>\n                            </div>\n                            : null\n                        }\n\n                        {!this.state.showResult ?\n                            <label className=''> Original Item Price <br></br>\n                                <input id='box1' className='rounded-lg text-center'\n                                    type=\"number\" pattern=\"[0-9]*\" inputMode=\"numeric\"\n                                    name='price'\n                                    placeholder='$0.00'\n                                    value={this.state.price}\n                                    onChange={this.handleInputChange}\n                                    required />\n                            </label>\n                            : null\n                        }\n\n                        <br></br><br></br>\n\n                        {!this.state.showResult ?\n                            <label className=''> Discount Amount <br></br>\n                                <input id='box3' className='rounded-lg text-center'\n                                    type=\"number\" pattern=\"[0-9]*\" inputMode=\"numeric\"\n                                    name='percent'\n                                    placeholder='15%'\n                                    value={this.state.percent}\n                                    onChange={this.handleInputChange}\n                                    required></input>\n                            </label>\n                            : null\n                        }\n\n                        <br></br><br></br>\n\n                        <label>\n                            {!this.state.showResult ?\n                                <button className='btn btn-warning' disabled={this.state.price === '' || this.state.percent === '' ? true : false} onClick={this.handleSubmit}>Submit</button>\n                                : null\n                            }\n                        </label>\n                    </form>\n                </div>\n            </>\n        )\n    }\n}\n\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Title from './components/Title';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n    <>\n      <Title/>\n      <Calculator/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}